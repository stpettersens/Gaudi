/*
Gaudi platform agnostic build tool
Copyright 2010-2011 Sam Saint-Pettersen.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

For dependencies, please see LICENSE file.
*/
package org.stpettersens.gaudi;
import org.python.core.*;
import org.python.util.*;

//NOTE: The GaudiJythonPlugin implementation code is written in 
//Java rather than Scala for consistency with GaudiGroovyPlugin.
public class GaudiJythonPlugin {
	
	GaudiJythonPlugin(String plugin, boolean logging) {
		
		//GaudiLogger logger = new GaudiLogger(logging);
		
		try {
			PySystemState.initialize();
			PythonInterpreter jyIntp = new PythonInterpreter();
			jyIntp.execfile(plugin);
			PyObject pluginObj = jyIntp.get("plugin");
			PyObject init = pluginObj.__getattr__("Initable");
		
			if(init.toString() == "True") {
				// On successful initialization, display feedback and run the plug-in
				String name = pluginObj.__getattr__("Name").toString();
				String action = pluginObj.__getattr__("Action").toString();
				System.out.println("Initialized Jython-based plug-in.\n");
				logger.dump(String.format("Initialized Jython-based plug-in -> %s.", name));
				System.out.println(String.format("[ %s => %s ]", name, action));
				PyObject runMethod = pluginObj.__getattr__("run");
				runMethod.__call__();
			}
			else {
				// Otherwise, display the standard did not load feedback
				System.out.println("Error with: Jython-based Plug-in (Failed to load).");
				logger.dump("Failed to load plug-in.");
			}
		}
		catch(Exception e) {
			System.out.println("\n\tError in plug-in code:\n\t\t" + e);
			logger.dump("Error in plug-in code.");
		}
	}
}
